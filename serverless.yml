service: serverless-rest-api-with-dynamodb


provider:
  name: aws
  stage: dev
  region: us-east-2
  runtime: nodejs16.x
  apiGateway:
    binaryMediaTypes:
      - '*/*' ##API Gateway passes the binary files as base64 encoded, so youâ€™ll need to decode from base64 before passing the body to parse-multipart.
  environment:
    DYNAMODB_TABLE: test
    DYNAMODB_TABLE_USERTICKET: testUserticket
    DYNAMODB_TABLE_IMAGE: testUpload
    BUCKET: warsamestorages
    ACCESS_ID: "S3RVER"
    SECRET_KEY: "S3RVER"
    S3OFFLINE_URL: "http://localhost:4569"
    DATABASE_URL: "http://localhost:8000"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem

          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-s3-local
custom:
  profile:
    dev: default
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      seed: true
      sharedDb: true
      migrate: true 
    seed:
      domain:
        sources:
          - table: test
            sources: [./test.json]
functions:
  createEvent:
    handler: todos/createEvent.create
    events:
      - http:
          path: todos/event
          method: post
          cors: true
  listEvents:
    handler: todos/listEvents.list
    events:
      - http:
          path: todos/event
          method: get
          cors: true
  getEvent:
    handler: todos/getEvent.get
    events:
      - http:
          path: todos/event/{id}
          method: get
          cors: true        
  buyTicket:
    handler: todos/buyTicket.buy
    events:
      - http:
          path: todos/userticket
          method: post
          cors: true
  listTickets:
    handler: todos/listTickets.list
    events:
      - http:
          path: todos/userticket
          method: get
          cors: true	
  app:
    handler: todos/upload.handler
    events:
      - http:
          path: todos/upload
          method: put
          cors: true	                                   
resources:
  Resources:
    WarsameStorages:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET}
        AccessControl: PublicRead
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
    TodosDynamoDbTableUserTicket:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_USERTICKET}
    TodosDynamoDbTableImage:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_IMAGE}     



        