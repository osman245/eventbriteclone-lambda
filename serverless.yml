service: serverless-rest-api-with-dynamodb


provider:
  name: aws
  stage: dev
  region: local
  runtime: nodejs16.x
  environment:
    DYNAMODB_TABLE: test
    DYNAMODB_TABLE_USERTICKET: testUserticket
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      docker:
      port: 8000
      seed: true
      sharedDb: true
      migrate: true 
    seed:
      domain:
        sources:
          - table: test
            sources: [./test.json]
functions:
  createEvent:
    handler: todos/createEvent.create
    events:
      - http:
          path: todos
          method: post
          cors: true
  listEvents:
    handler: todos/listEvents.list
    events:
      - http:
          path: todos
          method: get
          cors: true
  getEvent:
    handler: todos/getEvent.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true        
  buyTicket:
    handler: todos/buyTicket.buy
    events:
      - http:
          path: todos/userticket
          method: post
          cors: true
  listTickets:
    handler: todos/listTickets.list
    events:
      - http:
          path: todos/userticket
          method: get
          cors: true          
resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: test
    TodosDynamoDbTableUserTicket:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: testUserticket      
   



# get:
  #   handler: todos/get.get
  #   events:
  #     - http:
  #         path: todos/{id}
  #         method: get
  #         cors: true
  # get1:
  #   handler: todos/get1.get1
  #   events:
  #     - http:
  #         path: todos/userticket/{id}
  #         method: get
  #         cors: true









    # TodosDynamoDbTableUserTicket:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: id
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: id
    #         KeyType: HASH
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: testUserticket       
   


    # create1:
  #   handler: todos/create1.create1
  #   events:
  #     - http:
  #         path: todos/userticket
  #         method: post
  #         cors: true  